//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/NewInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Ziggurat
{
    public partial class @NewInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @NewInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""NewInput"",
    ""maps"": [
        {
            ""name"": ""CameraControl"",
            ""id"": ""5a90f312-620a-4e5b-86de-7600bfd1888f"",
            ""actions"": [
                {
                    ""name"": ""ActivateRotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3fea128b-f8bb-4496-b145-7035b8a6bcc3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scale"",
                    ""type"": ""Value"",
                    ""id"": ""65076343-a739-4248-b774-36b3a00b5934"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""1e4acfdf-7003-48a0-ae7e-6e0349ee6d9d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Focus"",
                    ""type"": ""Button"",
                    ""id"": ""8d00cd11-f12f-463e-a582-1bd1534d2589"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cfd519d2-d3eb-4635-9862-9ce69cb42ef9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b05d85b9-37ce-459b-bf5a-808fac68a49d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f14c6c0-c57b-4e56-aaef-f689f31a72d3"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e5d3407-707a-40ff-9a37-90f7c79b8ad9"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea84b728-3e7b-4279-9461-2aad8ad5db05"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f17d4fd9-cc92-4cfe-9117-4cd0cc2be1e8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b3fa7506-36ad-448d-aab4-f9ebb488ef43"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8ca5e641-6851-41db-983a-b00a8fe0faf0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3458367c-20bf-463b-af31-3a7613bee0d4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c5ec7ed3-5b29-4254-b5c2-28d42a931986"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CameraControl
            m_CameraControl = asset.FindActionMap("CameraControl", throwIfNotFound: true);
            m_CameraControl_ActivateRotation = m_CameraControl.FindAction("ActivateRotation", throwIfNotFound: true);
            m_CameraControl_Scale = m_CameraControl.FindAction("Scale", throwIfNotFound: true);
            m_CameraControl_Rotate = m_CameraControl.FindAction("Rotate", throwIfNotFound: true);
            m_CameraControl_Focus = m_CameraControl.FindAction("Focus", throwIfNotFound: true);
            m_CameraControl_Move = m_CameraControl.FindAction("Move", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CameraControl
        private readonly InputActionMap m_CameraControl;
        private ICameraControlActions m_CameraControlActionsCallbackInterface;
        private readonly InputAction m_CameraControl_ActivateRotation;
        private readonly InputAction m_CameraControl_Scale;
        private readonly InputAction m_CameraControl_Rotate;
        private readonly InputAction m_CameraControl_Focus;
        private readonly InputAction m_CameraControl_Move;
        public struct CameraControlActions
        {
            private @NewInput m_Wrapper;
            public CameraControlActions(@NewInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @ActivateRotation => m_Wrapper.m_CameraControl_ActivateRotation;
            public InputAction @Scale => m_Wrapper.m_CameraControl_Scale;
            public InputAction @Rotate => m_Wrapper.m_CameraControl_Rotate;
            public InputAction @Focus => m_Wrapper.m_CameraControl_Focus;
            public InputAction @Move => m_Wrapper.m_CameraControl_Move;
            public InputActionMap Get() { return m_Wrapper.m_CameraControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraControlActions set) { return set.Get(); }
            public void SetCallbacks(ICameraControlActions instance)
            {
                if (m_Wrapper.m_CameraControlActionsCallbackInterface != null)
                {
                    @ActivateRotation.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnActivateRotation;
                    @ActivateRotation.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnActivateRotation;
                    @ActivateRotation.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnActivateRotation;
                    @Scale.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnScale;
                    @Scale.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnScale;
                    @Scale.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnScale;
                    @Rotate.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnRotate;
                    @Rotate.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnRotate;
                    @Rotate.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnRotate;
                    @Focus.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnFocus;
                    @Focus.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnFocus;
                    @Focus.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnFocus;
                    @Move.started -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_CameraControlActionsCallbackInterface.OnMove;
                }
                m_Wrapper.m_CameraControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ActivateRotation.started += instance.OnActivateRotation;
                    @ActivateRotation.performed += instance.OnActivateRotation;
                    @ActivateRotation.canceled += instance.OnActivateRotation;
                    @Scale.started += instance.OnScale;
                    @Scale.performed += instance.OnScale;
                    @Scale.canceled += instance.OnScale;
                    @Rotate.started += instance.OnRotate;
                    @Rotate.performed += instance.OnRotate;
                    @Rotate.canceled += instance.OnRotate;
                    @Focus.started += instance.OnFocus;
                    @Focus.performed += instance.OnFocus;
                    @Focus.canceled += instance.OnFocus;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                }
            }
        }
        public CameraControlActions @CameraControl => new CameraControlActions(this);
        public interface ICameraControlActions
        {
            void OnActivateRotation(InputAction.CallbackContext context);
            void OnScale(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
            void OnFocus(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
        }
    }
}
